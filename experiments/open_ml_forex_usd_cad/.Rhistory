source('~/Desktop/marko_paper/github_code/allign_plots.R')
setwd("~/Desktop/marko_paper/github_code")
source('~/Desktop/marko_paper/github_code/allign_plots.R')
source('~/Desktop/marko_paper/github_code/prepare_data.R')
source('~/Desktop/marko_paper/github_code/solo_hospitals.R')
source('~/Desktop/marko_paper/github_code/solo_hospitals.R')
source('~/Desktop/marko_paper/github_code/global_benchmarka.R')
source('~/Desktop/marko_paper/github_code/run_experiment_variable_size_reference.R')
i
i = 3500
candidates = c(
2,10,20,35,50, 75, 100,
200,  300,  400,  600,  1000,
1500, 2000,
3000,  3500
)
input_p = i
message("Trying : ",input_p)
source("reference_data_hospitals_no_embedding.R") ## input P sent to the script --> ugly code
results[[length(results)+1]] = output_stats
names(results) = paste0("ref_size_",candidates)
saveRDS(results,file = "RDS/ANN_variable_reference_size_all_reference.RDS")
source('~/Desktop/marko_paper/github_code/allign_plots.R')
i = 150
input_p = i
message("Trying : ",input_p)
source("reference_data_hospitals_no_embedding.R") ## input P sent to the script --> ugly code
source('~/Desktop/marko_paper/github_code/run_experiment_variable_size_reference.R')
source('~/Desktop/marko_paper/github_code/global_benchmarka.R')
source('~/Desktop/marko_paper/github_code/run_experiment_variable_size_reference.R')
source('~/Desktop/marko_paper/github_code/run_experiment_variable_size_reference.R')
results
i
a <- readRDS("~/Desktop/marko_paper/github_code/RDS/ANN_variable_reference_size_all_reference.RDS")
b = results
append(b,tail(a,7))
results = append(b,tail(a,7))
names(results) = paste0("ref_size_",candidates)
saveRDS(results,file = "RDS/ANN_variable_reference_size_all_reference.RDS")
source('~/Desktop/marko_paper/github_code/allign_plots.R')
source('~/Desktop/marko_paper/github_code/run_experiment_variable_size_reference.R')
source('~/Desktop/marko_paper/github_code/run_experiment_variable_size_reference.R')
source('~/Desktop/marko_paper/github_code/allign_plots.R')
risi()
risi()[[1]]
source('~/Desktop/marko_paper/github_code/allign_plots.R')
risi()
source("test_models.R")
data = readRDS("data.RDS")
set.seed(1231)
h_size = 20
x = lapply(1:h_size,function(x){
tmp_data = data[[paste0("hospital_",x)]]$x %>% as.data.frame()
}) %>% rbindlist() %>% as.matrix()
y = lapply(1:h_size,function(x){
tmp_data = data[[paste0("hospital_",x)]]$y
}) %>% unlist()
x = rbind(x,data$reference)
y = c(y,data$reference_y %>% as.character() %>% as.numeric())
data = readRDS("../data.RDS")
set.seed(1231)
h_size = 20
x = lapply(1:h_size,function(x){
tmp_data = data[[paste0("hospital_",x)]]$x %>% as.data.frame()
}) %>% rbindlist() %>% as.matrix()
y = lapply(1:h_size,function(x){
tmp_data = data[[paste0("hospital_",x)]]$y
}) %>% unlist()
x = rbind(x,data$reference)
y = c(y,data$reference_y %>% as.character() %>% as.numeric())
no_emm_acc = c()
no_emm_auc = c()
for(i in 1:5){
h1 = create_hospital_model()
tmp_dec = train_model(50,h1$decoder,x_data = x ,y_data = y)
h1$decoder = tmp_dec$new_model
test_no_emm = evaluate_test_no_em(data$test$x,data$test$y,h1)
no_emm_acc = c(no_emm_acc,test_no_emm$acc)
no_emm_auc = c(no_emm_auc,test_no_emm$auc)
}
source("test_models.R")
data = readRDS("../data.RDS")
set.seed(1231)
h_size = 20
x = lapply(1:h_size,function(x){
tmp_data = data[[paste0("hospital_",x)]]$x %>% as.data.frame()
}) %>% rbindlist() %>% as.matrix()
y = lapply(1:h_size,function(x){
tmp_data = data[[paste0("hospital_",x)]]$y
}) %>% unlist()
x = rbind(x,data$reference)
y = c(y,data$reference_y %>% as.character() %>% as.numeric())
#no  embedd ------------------------------------------------------------------
## maybe do 100 reruns -- for MC analysis
no_emm_acc = c()
no_emm_auc = c()
h1 = create_hospital_model()
tmp_dec = train_model(50,h1$decoder,x_data = x ,y_data = y)
h1$decoder = tmp_dec$new_model
head(x)
head(y)
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/prepare_data.R')
setwd("~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye")
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/prepare_data.R')
setwd("~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/RF")
setwd("~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/ANN")
source("test_models.R")
data = readRDS("../data.RDS")
set.seed(1231)
h_size = 20
x = lapply(1:h_size,function(x){
tmp_data = data[[paste0("hospital_",x)]]$x %>% as.data.frame()
}) %>% rbindlist() %>% as.matrix()
y = lapply(1:h_size,function(x){
tmp_data = data[[paste0("hospital_",x)]]$y
}) %>% unlist()
x = rbind(x,data$reference)
y = c(y,data$reference_y %>% as.character() %>% as.numeric())
#no  embedd ------------------------------------------------------------------
## maybe do 100 reruns -- for MC analysis
no_emm_acc = c()
no_emm_auc = c()
h1 = create_hospital_model()
tmp_dec = train_model(50,h1$decoder,x_data = x ,y_data = y)
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/ANN/global_benchmarka.R')
mean(no_emm_acc)
mean(no_emm_auc)
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/ANN/reference_data_hospitals_no_embedding.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/ANN/run_experiment_variable_size_reference.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/ANN/reference_data_hospitals_no_embedding.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/ANN/run_experiment_variable_size_reference.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/ANN/run_experiment_variable_size_reference.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/ANN/run_experiment_variable_size_reference.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/ANN/run_experiment_variable_size_reference.R')
rf = readRDS("RDS/ANN_method.RDS")
library(ggplot2)
library(magrittr)
library(reshape2)
library(grid)
global = readRDS("RDS/global_ANN.RDS")
rf = readRDS("RDS/ANN_method.RDS")
rf_ = lapply(rf,function(x){
x$acc = (x$acc %>% TTR::SMA(.,n=2)) %>% max(.,na.rm = T)
x$auc = (x$auc %>% TTR::SMA(.,n=2))  %>% max(.,na.rm = T)
x
})
solo_acc = lapply(rf,function(x){
x$acc[1]
}) %>% unlist() %>% mean()
solo_auc = lapply(rf,function(x){
x$auc[1]
}) %>% unlist() %>% mean()
acc_ = lapply(rf_,function(x)x$acc) %>% unlist()
auc_ = lapply(rf_,function(x)x$auc) %>% unlist()
benchmark_acc = list(
solo = rep(solo_acc,length(acc_)),
global = rep(mean(global$acc),length(acc_)),
ref = acc_,
x = gsub(names(acc_),pattern = "ref_size_",replacement = "") %>% as.numeric()
)
benchmark_auc = list(
solo = rep(solo_auc,length(acc_)),
global = rep(mean(global$auc),length(acc_)),
ref = auc_,
x = gsub(names(auc_),pattern = "ref_size_",replacement = "") %>% as.numeric()
)
acc = stringi::stri_list2matrix(benchmark_acc)
acc = apply(acc,2,as.numeric)
auc = stringi::stri_list2matrix(benchmark_auc)
auc = apply(auc,2,as.numeric)
acc = as.data.frame(acc)
auc = as.data.frame(auc)
colnames(acc) = c(
"solo",
"global",
"proposed method",
"Size"
)
colnames(auc) = c(
"solo",
"global",
"proposed method",
"Size"
)
risi = function(acc11=acc,auc11=auc){
# names = c(names,"Size")
tmp1 = melt(acc11,"Size")
tmp2 = melt(auc11,"Size")
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy (test)") + ggtitle("RF 100 trees : 20 hospitals (from 70-130 examples per hosp.)") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
two = ggplot(tmp2, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("AUC (test)") + ggtitle("RF 100 trees: 20 hospitals (from 70-130 examples per hosp.)") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
multiplot = function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(
one,two,cols=1
)
}
risi()
auc11
acc
risi2 = function(acc11=acc,auc11=auc){
# names = c(names,"Size")
tmp1 = melt(acc11[,-2],"Size")
tmp2 = melt(auc11[,-2],"Size")
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy (test)") + ggtitle("RF 100 trees : 20 hospitals (from 70-130 examples per hosp.)") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
two = ggplot(tmp2, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("AUC (test)") + ggtitle("RF 100 trees: 20 hospitals (from 70-130 examples per hosp.)") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
multiplot = function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(
one,two,cols=1
)
}
risi()
risi2()
tmp11 = melt(acc11[,-2],"Size")
tmp22 = melt(auc11[,-2],"Size")
risi = function(acc11=acc,auc11=auc){
# names = c(names,"Size")
tmp1 = melt(acc11,"Size")
tmp2 = melt(auc11,"Size")
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy (test)") + ggtitle("RF 100 trees : 20 hospitals (from 70-130 examples per hosp.)") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
two = ggplot(tmp2, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("AUC (test)") + ggtitle("RF 100 trees: 20 hospitals (from 70-130 examples per hosp.)") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
tmp11 = melt(acc11[,-2],"Size")
tmp22 = melt(auc11[,-2],"Size")
three =  ggplot(tmp11, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy (test)") + ggtitle("RF 100 trees : 20 hospitals (from 70-130 examples per hosp.)") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
four = ggplot(tmp22, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("AUC (test)") + ggtitle("RF 100 trees: 20 hospitals (from 70-130 examples per hosp.)") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
multiplot = function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(
one,two,three,four,cols=2
)
}
risi()
risi = function(acc11=acc,auc11=auc){
# names = c(names,"Size")
tmp1 = melt(acc11,"Size")
tmp2 = melt(auc11,"Size")
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy (test)") + ggtitle("RF 100 trees : 20 hospitals (from 70-130 examples per hosp.)") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
two = ggplot(tmp2, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("AUC (test)") + ggtitle("RF 100 trees: 20 hospitals (from 70-130 examples per hosp.)") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
tmp11 = melt(acc11[,-2],"Size")
tmp22 = melt(auc11[,-2],"Size")
three =  ggplot(tmp11, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy (test)") + ggtitle("") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
four = ggplot(tmp22, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("AUC (test)") + ggtitle("") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
multiplot = function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(
one,two,three,four,cols=2
)
}
risi()
jpeg(filename = "../results_png/ANN_eye.JPG", pointsize =12, quality = 100,width = 1200,height = 800)
risi()
dev.off()
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/ANN/allign_plots.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/ANN/allign_plots.R')
setwd("~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/RF")
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/RF/plot_results.R')
setwd("~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/forex_usd_cad")
library(magrittr)
set.seed(1231)
data = read.csv("data.csv")
head(data)
data[,12] %>% as.character()
data[,12] %>% as.numeric()
data[,12] %>% as.logical()
data[,12] %>% as.logical() %>% as.numeric()
data[,12] = data[,12] %>% as.logical() %>% as.numeric()
library(magrittr)
set.seed(1231)
data = read.csv("data.csv")
data[,1:11] = scale(data[,1:11])
data[,12] = data[,12] %>% as.logical() %>% as.numeric()
data = data[sample(1:nrow(data)),]
View(data)
library(magrittr)
set.seed(1231)
data = read.csv("data.csv")
data[,2:11] = scale(data[,2:11])
data[,12] = data[,12] %>% as.logical() %>% as.numeric()
## ignore the time for now
data = data[sample(1:nrow(data)),2:12]
spl = split(37501:nrow(data),1:20)
spl
length(spl[[1]])
library(magrittr)
set.seed(1231)
data = read.csv("data.csv")
data[,2:11] = scale(data[,2:11])
data[,12] = data[,12] %>% as.logical() %>% as.numeric()
## ignore the time for now
data = data[sample(1:nrow(data)),2:12]
## eye data
# categorical, balanced
# 15K
reference = data[1:30000,1:10] %>% as.matrix()
reference_y = data[1:30000,11]
test = data[30001:37500,]
spl = split(37501:nrow(data),1:20)
## variable size of hospitals
for(i in 1:10){
size = runif(1,0,150) %>% round()
who = sample(spl[[i]],size = size)
spl[[i]] = setdiff(spl[[i]],who)
spl[[i+10]] = c(spl[[i+10]],who) %>% sample ## add to enemy
}
hospitals = list()
for(i in 1:length(spl)){
hospitals[[i]] = list()
hospitals[[i]]$x = data[spl[[i]],1:10] %>% as.matrix()
hospitals[[i]]$y = data[spl[[i]],11] %>% as.character() %>% as.numeric()
}
names(hospitals) = paste0("hospital_",1:length(spl))
hospitals$reference = reference
hospitals$reference_y = reference_y
hospitals$test = list()
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/forex_usd_cad/prepare_data.R')
