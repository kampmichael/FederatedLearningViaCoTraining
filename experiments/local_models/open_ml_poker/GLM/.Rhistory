geom_line(aes(x=1:nrow(y),y=y[,1+5]),col="springgreen",lwd=0.75,) +
geom_line(aes(x=1:nrow(y),y=y[,2+5]),col="springgreen4",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,3+5]),col="steelblue",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,4+5]),col="turquoise",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,5+5]),col="slateblue1",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,2+5],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,3+5],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,4+5],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,5+5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,6+5],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,2+5],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,3+5],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,4+5],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,5+5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,6+5],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
ylim(0.62,0.825)+
xlab("Iteration of proposed method") + ylab("Agent's test accuracy") + ggtitle("18% reference dataset, 33% per iteration",subtitle = "lower dash = solo, higher dash = global, colour = agent")
g1
y=d1[[1]]
y = apply(y, 2, function(x)EMA_cpp(x,5))
g1 = ggplot() +
geom_line(aes(x=1:nrow(y),y=y[,1+5]),col="springgreen",lwd=0.75,) +
geom_line(aes(x=1:nrow(y),y=y[,2+5]),col="springgreen4",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,3+5]),col="steelblue",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,4+5]),col="turquoise",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,5+5]),col="slateblue1",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,2+5],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,3+5],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,4+5],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,5+5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,6+5],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,2+5],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,3+5],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,4+5],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,5+5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,6+5],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
# ylim(0.62,0.825)+
xlab("Iteration of proposed method") + ylab("Agent's test accuracy") + ggtitle("18% reference dataset, 33% per iteration",subtitle = "lower dash = solo, higher dash = global, colour = agent")
g1
y=d1[[1]]
y = apply(y, 2, function(x)EMA_cpp(x,5))
g1 = ggplot() +
geom_line(aes(x=1:nrow(y),y=y[,1+5]),col="springgreen",lwd=0.75,) +
geom_line(aes(x=1:nrow(y),y=y[,2+5]),col="springgreen4",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,3+5]),col="steelblue",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,4+5]),col="turquoise",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,5+5]),col="slateblue1",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,2+5],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,3+5],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,4+5],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,5+5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,6+5],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,2+5],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,3+5],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,4+5],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,5+5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,6+5],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
ylim(0.7,0.925)+
xlab("Iteration of proposed method") + ylab("Agent's test accuracy") + ggtitle("18% reference dataset, 33% per iteration",subtitle = "lower dash = solo, higher dash = global, colour = agent")
g1
y1=d1[[2]]
y1 = apply(y1, 2, function(x)EMA_cpp(x,5))
g2 = ggplot() +
geom_line(aes(x=1:nrow(y1),y=y1[,1+5]),col="springgreen",lwd=0.75) +
geom_line(aes(x=1:nrow(y1),y=y1[,2+5]),col="springgreen4",lwd=0.75) +
geom_line(aes(x=1:nrow(y1),y=y1[,3+5]),col="steelblue",lwd=0.75) +
geom_line(aes(x=1:nrow(y1),y=y1[,4+5]),col="turquoise",lwd=0.75) +
geom_line(aes(x=1:nrow(y1),y=y1[,5+5]),col="slateblue1",lwd=0.75) +
geom_line(aes(x=1:nrow(y1),y=rep(d1[[4]][1,2+5],nrow(y1))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y1),y=rep(d1[[4]][1,3+5],nrow(y1))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y1),y=rep(d1[[4]][1,4+5],nrow(y1))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y1),y=rep(d1[[4]][1,5+5],nrow(y1))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y1),y=rep(d1[[4]][1,6+5],nrow(y1))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y1),y=rep(d1[[4]][2,2+5],nrow(y1))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y1),y=rep(d1[[4]][2,3+5],nrow(y1))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y1),y=rep(d1[[4]][2,4+5],nrow(y1))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y1),y=rep(d1[[4]][2,5+5],nrow(y1))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y1),y=rep(d1[[4]][2,6+5],nrow(y1))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
# ylim(0.62,0.825)+
xlab("Iteration of proposed method") + ylab("Agent's test accuracy") + ggtitle("18% reference dataset, 66% per iteration",subtitle = "lower dash = solo, higher dash = global, colour = agent")
g2
y2=d1[[3]]
y2 = apply(y2, 2, function(x)EMA_cpp(x,5))
g3 = ggplot() +
geom_line(aes(x=1:nrow(y2),y=y2[,1+5]),col="springgreen",lwd=0.75) +
geom_line(aes(x=1:nrow(y2),y=y2[,2+5]),col="springgreen4",lwd=0.75) +
geom_line(aes(x=1:nrow(y2),y=y2[,3+5]),col="steelblue",lwd=0.75) +
geom_line(aes(x=1:nrow(y2),y=y2[,4+5]),col="turquoise",lwd=0.75) +
geom_line(aes(x=1:nrow(y2),y=y2[,5+5]),col="slateblue1",lwd=0.75) +
geom_line(aes(x=1:nrow(y2),y=rep(d1[[4]][1,2+5],nrow(y2))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y2),y=rep(d1[[4]][1,3+5],nrow(y2))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y2),y=rep(d1[[4]][1,4+5],nrow(y2))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y2),y=rep(d1[[4]][1,5+5],nrow(y2))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y2),y=rep(d1[[4]][1,6+5],nrow(y2))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y2),y=rep(d1[[4]][2,2+5],nrow(y2))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y2),y=rep(d1[[4]][2,3+5],nrow(y2))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y2),y=rep(d1[[4]][2,4+5],nrow(y2))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y2),y=rep(d1[[4]][2,5+5],nrow(y2))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y2),y=rep(d1[[4]][2,6+5],nrow(y2))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
ylim(0.7,0.925)+
xlab("Iteration of proposed method") + ylab("Agent's test accuracy") + ggtitle("18% reference dataset, 100% per iteration",subtitle = "lower dash = solo, higher dash = global, colour = agent")
g3
z=d2[[1]]
z = apply(z, 2, function(x)EMA_cpp(x,5))
g4 = ggplot() +
geom_line(aes(x=1:nrow(z),y=z[,1+5]),col="springgreen",lwd=0.75,) +
geom_line(aes(x=1:nrow(z),y=z[,2+5]),col="springgreen4",lwd=0.75) +
geom_line(aes(x=1:nrow(z),y=z[,3+5]),col="steelblue",lwd=0.75) +
geom_line(aes(x=1:nrow(z),y=z[,4+5]),col="turquoise",lwd=0.75) +
geom_line(aes(x=1:nrow(z),y=z[,5+5]),col="slateblue1",lwd=0.75) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][1,2+5],nrow(z))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][1,3+5],nrow(z))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][1,4+5],nrow(z))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][1,5+5],nrow(z))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][1,6+5],nrow(z))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][2,2+5],nrow(z))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][2,3+5],nrow(z))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][2,4+5],nrow(z))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][2,5+5],nrow(z))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][2,6+5],nrow(z))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
ylim(0.7,0.925)+
xlab("Iteration of proposed method") + ylab("Agent's test accuracy") + ggtitle("30% reference dataset, 33% per iteration",subtitle = "lower dash = solo, higher dash = global, colour = agent")
g4
z=d2[[1]]
z = apply(z, 2, function(x)EMA_cpp(x,5))
g4 = ggplot() +
geom_line(aes(x=1:nrow(z),y=z[,1+5]),col="springgreen",lwd=0.75,) +
geom_line(aes(x=1:nrow(z),y=z[,2+5]),col="springgreen4",lwd=0.75) +
geom_line(aes(x=1:nrow(z),y=z[,3+5]),col="steelblue",lwd=0.75) +
geom_line(aes(x=1:nrow(z),y=z[,4+5]),col="turquoise",lwd=0.75) +
geom_line(aes(x=1:nrow(z),y=z[,5+5]),col="slateblue1",lwd=0.75) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][1,2+5],nrow(z))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][1,3+5],nrow(z))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][1,4+5],nrow(z))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][1,5+5],nrow(z))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][1,6+5],nrow(z))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][2,2+5],nrow(z))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][2,3+5],nrow(z))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][2,4+5],nrow(z))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][2,5+5],nrow(z))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(z),y=rep(d2[[4]][2,6+5],nrow(z))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
ylim(0.65,0.925)+
xlab("Iteration of proposed method") + ylab("Agent's test accuracy") + ggtitle("30% reference dataset, 33% per iteration",subtitle = "lower dash = solo, higher dash = global, colour = agent")
g4
g7 = ggplot() +
geom_line(aes(x=1:nrow(w),y=w[,1+5]),col="springgreen",lwd=0.75,) +
geom_line(aes(x=1:nrow(w),y=w[,2+5]),col="springgreen4",lwd=0.75) +
geom_line(aes(x=1:nrow(w),y=w[,3+5]),col="steelblue",lwd=0.75) +
geom_line(aes(x=1:nrow(w),y=w[,4+5]),col="turquoise",lwd=0.75) +
geom_line(aes(x=1:nrow(w),y=w[,5+5]),col="slateblue1",lwd=0.75) +
geom_line(aes(x=1:nrow(w),y=rep(d3[[4]][1,2+5],nrow(w))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(w),y=rep(d3[[4]][1,3+5],nrow(w))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(w),y=rep(d3[[4]][1,4+5],nrow(w))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(w),y=rep(d3[[4]][1,5+5],nrow(w))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(w),y=rep(d3[[4]][1,6+5],nrow(w))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(w),y=rep(d3[[4]][2,2+5],nrow(w))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(w),y=rep(d3[[4]][2,3+5],nrow(w))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(w),y=rep(d3[[4]][2,4+5],nrow(w))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(w),y=rep(d3[[4]][2,5+5],nrow(w))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(w),y=rep(d3[[4]][2,6+5],nrow(w))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
ylim(0.55,0.825)+
xlab("Iteration of proposed method") + ylab("Agent's test accuracy") + ggtitle("50% reference dataset, 33% per iteration",subtitle = "lower dash = solo, higher dash = global, colour = agent")
g7
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/ANN/plot_auc.R')
multiplot(g1,g4,g7,g2,g5,g8,g3,g6,g9,cols=3)
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/ANN/plot_auc.R')
multiplot(g1,g4,g7,g2,g5,g8,g3,g6,g9,cols=3)
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/ANN/plot_auc.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/ANN/plot_acc.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/ANN/plot_auc.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/RF/main_80_n5.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/RF/plot_acc.R')
warnings()
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/RF/plot_auc.R')
g1 = ggplot() +
geom_line(aes(x=1:nrow(y),y=y[,1]),col="springgreen",lwd=0.75,) +
geom_line(aes(x=1:nrow(y),y=y[,2]),col="springgreen4",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,3]),col="steelblue",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,4]),col="turquoise",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,5]),col="slateblue1",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,2],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,3],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,4],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,6],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,2],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,3],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,4],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,6],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
# ylim(0.62,0.825)+
xlab("Iteration of proposed method") + ylab("Agent's test accuracy") + ggtitle("18% reference dataset, 33% per iteration",subtitle = "lower dash = solo, higher dash = global, colour = agent")
g1
y=d1[[1]]
y = apply(y, 2, function(x)EMA_cpp(x,5))
g1 = ggplot() +
geom_line(aes(x=1:nrow(y),y=y[,1]),col="springgreen",lwd=0.75,) +
geom_line(aes(x=1:nrow(y),y=y[,2]),col="springgreen4",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,3]),col="steelblue",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,4]),col="turquoise",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,5]),col="slateblue1",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,2],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,3],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,4],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,6],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,2],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,3],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,4],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,6],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
ylim(0.82,0.95)+
xlab("Iteration of proposed method") + ylab("Agent's test accuracy") + ggtitle("18% reference dataset, 33% per iteration",subtitle = "lower dash = solo, higher dash = global, colour = agent")
g1
y=d1[[1]]
y = apply(y, 2, function(x)EMA_cpp(x,5))
g1 = ggplot() +
geom_line(aes(x=1:nrow(y),y=y[,1]),col="springgreen",lwd=0.75,) +
geom_line(aes(x=1:nrow(y),y=y[,2]),col="springgreen4",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,3]),col="steelblue",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,4]),col="turquoise",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,5]),col="slateblue1",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,2],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,3],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,4],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,6],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,2],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,3],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,4],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,6],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
ylim(0.82,0.935)+
xlab("Iteration of proposed method") + ylab("Agent's test accuracy") + ggtitle("18% reference dataset, 33% per iteration",subtitle = "lower dash = solo, higher dash = global, colour = agent")
g1
library(reshape2)
y=d1[[1]]
y = apply(y, 2, function(x)EMA_cpp(x,2))
g1 = ggplot() +
geom_line(aes(x=1:nrow(y),y=y[,1]),col="springgreen",lwd=0.75,) +
geom_line(aes(x=1:nrow(y),y=y[,2]),col="springgreen4",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,3]),col="steelblue",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,4]),col="turquoise",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,5]),col="slateblue1",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,2],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,3],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,4],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,6],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,2],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,3],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,4],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,6],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
ylim(0.82,0.935)+
xlab("Iteration of proposed method") + ylab("Agent's test accuracy") + ggtitle("18% reference dataset, 33% per iteration",subtitle = "lower dash = solo, higher dash = global, colour = agent")
g1
y=d1[[1]]
y = apply(y, 2, function(x)EMA_cpp(x,2))
g1 = ggplot() +
geom_line(aes(x=1:nrow(y),y=y[,1]),col="springgreen",lwd=0.75,) +
geom_line(aes(x=1:nrow(y),y=y[,2]),col="springgreen4",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,3]),col="steelblue",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,4]),col="turquoise",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,5]),col="slateblue1",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,2],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,3],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,4],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,6],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,2],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,3],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,4],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,6],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
ylim(0.8,0.935)+
xlab("Iteration of proposed method") + ylab("Agent's test accuracy") + ggtitle("18% reference dataset, 33% per iteration",subtitle = "lower dash = solo, higher dash = global, colour = agent")
g1
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/RF/plot_acc.R')
multiplot(g1,g4,g7,g2,g5,g8,g3,g6,g9,cols=3)
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/RF/plot_acc.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/RF/plot_acc.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/RF/plot_acc.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/RF/plot_auc.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/RF/plot_auc.R')
multiplot(g1,g4,g7,g2,g5,g8,g3,g6,g9,cols=3)
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/RF/plot_auc.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/GLM/plot_acc.R')
multiplot(g1,g4,g7,g2,g5,g8,g3,g6,g9,cols=3)
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/GLM/plot_auc.R')
data = readRDS("../data/data_18_n5.RDS")
data_clone = data
n_h = 5
h_size = 5
set.seed(1231)
hospitals_result = data.frame(
type=NA,h1_acc=NA,h2_acc=NA,h3_acc=NA,h4_acc=NA,h5_acc=NA,h1_auc=NA,h2_auc=NA,h3_auc=NA,h4_auc=NA,h5_auc=NA
)
holder_results = rep(NA,11)
library(magrittr)
library(projectXcppCode)
## same code should work on CPU with just normal tensorflow/keras
## library(keras)
## library(tensorflow)
x=data$reference
y=data$reference_y
model <- glm(y~.,data=tmp)
tmp = cbind(as.data.frame(x),y=y)
model <- glm(y~.,data=tmp)
model
predict(as.data.frame(x),model)
predict(newdata = as.data.frame(x),model)
predict(newdata = as.data.frame(x),model,type = "prob")
a =predict(as.data.frame(x),model)
a =predict(newdata = as.data.frame(x),model,type = "prob")
a =predict(newdata = as.data.frame(x),model,type = "response")
a
plot(density(a))
preds = predict(object = model,newdata = as.data.frame(x))
preds = preds[,2]/(preds[,1] + preds[,2])
# preds = preds[,2]/(preds[,1] + preds[,2])
acc = sum(round(preds)==y) / nrow(x)
auc = cvAUC::AUC(predictions = preds,labels = factor(y,levels = c(0,1)))
data = readRDS("../data/data_18_n5.RDS")
data_clone = data
n_h = 5
h_size = 5
set.seed(1231)
hospitals_result = data.frame(
type=NA,h1_acc=NA,h2_acc=NA,h3_acc=NA,h4_acc=NA,h5_acc=NA,h1_auc=NA,h2_auc=NA,h3_auc=NA,h4_auc=NA,h5_auc=NA
)
holder_results = rep(NA,11)
library(magrittr)
library(projectXcppCode)
## same code should work on CPU with just normal tensorflow/keras
## library(keras)
## library(tensorflow)
# functions ---------------------------------------------------------------
train_tree = function(x,y){
tmp = cbind(as.data.frame(x),y=y)
model <- glm(y~.,data=tmp)
list(
model = model
)
}
eval_tree_data = function(x,y,model){
preds = predict(object = model,newdata = as.data.frame(x))
# preds = preds[,2]/(preds[,1] + preds[,2])
acc = sum(round(preds)==y) / nrow(x)
auc = cvAUC::AUC(predictions = preds,labels = factor(y,levels = c(0,1)))
return(list(
acc= acc,
auc = auc
))
}
train_test_hospital_solo_tree = function(i,data){
tmp_data = data[[paste0("hospital_",i)]]
test = data$test
tree = train_tree(tmp_data$x,tmp_data$y)
eval_test = eval_tree_data(test$x,test$y,tree$model)
return(
list(
test_acc = eval_test$acc,
test_auc = eval_test$auc
)
)
}
allign_predictions = function(i){
current_model = hospitals[[i]]
current_data = current_model
## working data
tmp = data$reference
# tmp = tmp[sample(1:nrow(tmp),size = nrow(tmp)/5),]
## create temp target Y
others = setdiff(1:n_h,i)
other_embeddings = lapply(others,function(x){
tmp_model = hospitals[[x]]
predict(tmp_model$model$model,newdata = as.data.frame(tmp),type = "vote")
})
holder = other_embeddings[[1]]
for(j in 2:length(other_embeddings)){
holder = holder + other_embeddings[[j]]
}
holder = holder/length(other_embeddings)
holder = holder[,2] / (holder[,1] + holder[,2])
# ind = sample(1:nrow(tmp),size = min(100,nrow(tmp)))
new_x = rbind(current_data$x,tmp)
new_y = c(current_data$y,round(holder))
tmp_tree = train_tree(new_x,new_y)
current_model$model = tmp_tree
# current_model$x = new_x
# current_model$y = new_y
rm(tmp)
## global assign
hospitals[[i]] <<- current_model
NULL
}
get_test_predictions = function(){
acc = c()
auc = c()
for(i in 1:n_h){
ev = eval_tree_data(x = data[[paste0("hospital_",i)]]$test_x,y =data[[paste0("hospital_",i)]]$test_y,model = hospitals[[i]]$model$model)
acc = c(acc,ev$acc)
auc = c(auc,ev$auc)
}
return(
list(
acc=acc,
auc=auc
)
)
}
plot_progress = function(){
lims = c(min(epoch_matrix,na.rm = T)-0.05,max(epoch_matrix,na.rm = T)+0.05)
plot(epoch_matrix[,1],type="l",ylim=lims)
for(j in 2:5){
lines(epoch_matrix[,j],type="l")
}
for(j in 6:10){
lines(epoch_matrix[,j],type="l",col="red")
}
}
# local solo --------------------------------------------------------------
hospitals_result = rbind(hospitals_result,holder_results)
hospitals_result$type[nrow(hospitals_result)] = "local_only"
message("Solo done!")
# global ------------------------------------------------------------------
hospitals_result = rbind(hospitals_result,holder_results)
hospitals_result$type[nrow(hospitals_result)] = "global"
x = lapply(1:h_size,function(x){
tmp_data = data[[paste0("hospital_",x)]]$x %>% as.data.frame()
}) %>% rbindlist() %>% as.matrix()
y = lapply(1:h_size,function(x){
tmp_data = data[[paste0("hospital_",x)]]$y
}) %>% unlist()
x = rbind(x,data$reference)
y = c(y,data$reference_y %>% as.character() %>% as.numeric())
model = train_tree(x,y)
for(i in 1:h_size){
tmp =  eval_tree_data(x =  data[[paste0("hospital_",i)]]$test_x,y = data[[paste0("hospital_",i)]]$test_y,model = model$model)
hospitals_result[nrow(hospitals_result),i+1] = tmp$acc
hospitals_result[nrow(hospitals_result),i+6] = tmp$auc
}
n_rep = 3
for(j in 2:n_rep){
model = train_tree(x,y)
for(i in 1:h_size){
tmp =  eval_tree_data(x =  data[[paste0("hospital_",i)]]$test_x,y = data[[paste0("hospital_",i)]]$test_y,model = model$model)
hospitals_result[nrow(hospitals_result),i+1] = hospitals_result[nrow(hospitals_result),i+1] + tmp$acc
hospitals_result[nrow(hospitals_result),i+6] = hospitals_result[nrow(hospitals_result),i+6] + tmp$auc
}
}
hospitals_result[nrow(hospitals_result),2:11] = hospitals_result[nrow(hospitals_result),2:11]/n_rep
message("Global done!")
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/GLM/main_18_n5.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/GLM/main_18_n5.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/GLM/main_30_n5.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/GLM/main_50_n5.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/GLM/plot_acc.R')
multiplot(g1,g4,g7,g2,g5,g8,g3,g6,g9,cols=3)
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/GLM/plot_auc.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/GLM/plot_auc.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_forex_usd_cad/GLM/main_18_n5.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_forex_usd_cad/GLM/main_30_n5.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_forex_usd_cad/GLM/main_50_n5.R')
d1 = readRDS("data_18_n5.RDS")
d2 = readRDS("data_30_n5.RDS")
d3 = readRDS("data_50_n5.RDS")
library(projectXcppCode)
library(reshape2)
y=d1[[1]]
y = apply(y, 2, function(x)EMA_cpp(x,2))
g1 = ggplot() +
geom_line(aes(x=1:nrow(y),y=y[,1]),col="springgreen",lwd=0.75,) +
geom_line(aes(x=1:nrow(y),y=y[,2]),col="springgreen4",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,3]),col="steelblue",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,4]),col="turquoise",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=y[,5]),col="slateblue1",lwd=0.75) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,2],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,3],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,4],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][1,6],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,2],nrow(y))),lwd=0.75,col="springgreen",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,3],nrow(y))),lwd=0.75,col="springgreen4",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,4],nrow(y))),lwd=0.75,col="steelblue",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,5],nrow(y))),lwd=0.75,col="turquoise",linetype="dashed",alpha=0.8) +
geom_line(aes(x=1:nrow(y),y=rep(d1[[4]][2,6],nrow(y))),lwd=0.75,col="slateblue1",linetype="dashed",alpha=0.8)
g1
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_forex_usd_cad/GLM/plot_acc.R')
multiplot(g1,g4,g7,g2,g5,g8,g3,g6,g9,cols=3)
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_forex_usd_cad/GLM/plot_acc.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_forex_usd_cad/GLM/plot_auc.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_forex_usd_cad/GLM/plot_auc.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_forex_usd_cad/GLM/plot_auc.R')
preds = predict(object = model,newdata = as.data.frame(x),type="response")
x=data$reference
y= data$reference_y
tmp = cbind(as.data.frame(x),y=y)
model <- glm(y~.,data=tmp)
preds = predict(object = model,newdata = as.data.frame(x),type="response")
preds
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_forex_usd_cad/GLM/main_18_n5.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_forex_usd_cad/GLM/main_30_n5.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_forex_usd_cad/GLM/main_50_n5.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_forex_usd_cad/GLM/plot_acc.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_forex_usd_cad/GLM/plot_auc.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_poker/GLM/main_18_n5.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_poker/GLM/main_30_n5.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_poker/GLM/main_50_n5.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_poker/GLM/plot_acc.R')
source('~/Desktop/marko_paper/FederatedLearningViaCoTraining/experiments/open_ml_poker/GLM/plot_auc.R')
