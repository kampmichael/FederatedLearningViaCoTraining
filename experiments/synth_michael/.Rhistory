two = ggplot(tmp2, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Area under Curve") + ggtitle("Area under Curve on Unseen data:")
multiplot = function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(one,two,cols=2)
}
risi(imena)
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy") + ggtitle("Accuracy on Unseen data:") +
# theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_x_continuous("Ref. Size", labels = as.character(Size), breaks = Size)
acc11=acc
auc11=auc
names = imena
names = c(names,"Size")
tmp1 = melt(acc11[,names],"Size")
tmp2 = melt(auc11[,names],"Size")
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy") + ggtitle("Accuracy on Unseen data:") +
# theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_x_continuous("Ref. Size", labels = as.character(Size), breaks = Size)
tmp1$Size
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy") + ggtitle("Accuracy on Unseen data:") +
# theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_x_continuous("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
one
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy") + ggtitle("Accuracy on Unseen data:") +
# theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_x_discrete("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
one
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy") + ggtitle("Accuracy on Unseen data:") +
# theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
one
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy") + ggtitle("Accuracy on Unseen data:") +
# theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_x_log("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy") + ggtitle("Accuracy on Unseen data:") +
# theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_x_sqrt("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
one
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy (test)") + ggtitle("20 hospitals (from 35-65 examples per hosp.):") +
# theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) +
scale_x_sqrt("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
one
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy (test)") + ggtitle("20 hospitals (from 35-65 examples per hosp.):") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5)) +
scale_x_sqrt("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
one
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy (test)") + ggtitle("20 hospitals (from 35-65 examples per hosp.):") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_sqrt("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
one
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy (test)") + ggtitle("20 hospitals (from 35-65 examples per hosp.):") +
theme(axis.text.x = element_text(angle = 15)) +
scale_x_sqrt("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
one
two = ggplot(tmp2, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("AUC (test)") + ggtitle("20 hospitals (from 35-65 examples per hosp.):") +
theme(axis.text.x = element_text(angle = 15)) +
scale_x_sqrt("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
two
risi = function(names,acc11=acc,auc11=auc){
names = c(names,"Size")
tmp1 = melt(acc11[,names],"Size")
tmp2 = melt(auc11[,names],"Size")
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy (test)") + ggtitle("20 hospitals (from 35-65 examples per hosp.):") +
theme(axis.text.x = element_text(angle = 15)) +
scale_x_sqrt("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
two = ggplot(tmp2, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("AUC (test)") + ggtitle("20 hospitals (from 35-65 examples per hosp.):") +
theme(axis.text.x = element_text(angle = 15)) +
scale_x_sqrt("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
multiplot = function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
list(
one,
two
)
}
risi(imena)
risi(imena)[[1]]
save.image("~/Desktop/marko_paper/share/for_markdown.RData")
source('~/Desktop/marko_paper/github_code/allign_plots.R')
source('~/Desktop/marko_paper/github_code/allign_plots.R')
load("for_markdown.RData")
library(shiny)
library(ggplot2)
library(magrittr)
library(reshape2)
library(grid)
library(kableExtra)
library(keras)
library(tensorflow)
data = read.csv("diabetes.csv")
shinyApp(
ui = fluidPage(
column(12,align="center",
selectInput("name", "Metric:",
choices =c("ACC","AUC"),multiple=F,selected = "ACC"),
br(),
plotOutput("plot")
)
),
server = function(input, output) {
output$plot = renderPlot({
if(length(input$name)>0){
risi(acc11 = acc,auc11 = auc)[[input$name]]
}
})
},
options = list(height = 800,width=1000)
)
source('~/Desktop/marko_paper/github_code/allign_plots.R')
source('~/Desktop/marko_paper/github_code/allign_plots.R')
source('~/Desktop/marko_paper/github_code/run_experiment_variable_size_reference.R')
library(magrittr)
results = list()
size = nrow((tmp<-readRDS("data.RDS"))$reference)
print(size)
set.seed(1231)
candidates = c(
2,  5,  10,  15,  20,  30,  40,  50,  100,
200,  300,  400,  500,  750,  1000,
1250,  1500,  1750,  2000,
2500,  3000,  3500
)
for(i in candidates){
rm(list = setdiff(ls(),c("results","candidates","i")))
input_p = i
message("Trying : ",input_p)
source("reference_data_hospitals_no_embedding.R") ## input P sent to the script --> ugly code
# output_stats
results[[length(results)]] = output_stats
}
source('~/Desktop/marko_paper/github_code/run_experiment_variable_size_reference.R')
source('~/Desktop/marko_paper/github_code/allign_plots.R')
risi
risi()
risi()[[1]]
i = 3500
input_p = i
message("Trying : ",input_p)
source("reference_data_hospitals_no_embedding.R") ## input P sent to the script --> ugly code
plot(test_acc,type="l",ylim = c(0.715,0.84),main=paste0("Reference size: ",input_p))
plot(test_acc,type="l",ylim = c(0.5,0.84),main=paste0("Reference size: ",input_p))
lines(test_auc,type="l",col="red")
test_acc
source('~/Desktop/marko_paper/github_code/reference_data_hospitals_no_embedding.R')
source('~/Desktop/marko_paper/github_code/prepare_data.R')
spl
source('~/Desktop/marko_paper/github_code/global_benchmarka.R')
source('~/Desktop/marko_paper/github_code/global_benchmarka.R')
source('~/Desktop/marko_paper/github_code/solo_hospitals.R')
source('~/Desktop/marko_paper/github_code/run_experiment_variable_size_reference.R')
i = 4000
input_p = i
message("Trying : ",input_p)
source("reference_data_hospitals_no_embedding.R") ## input P sent to the script --> ugly code
message("Trying : ",input_p)
source("reference_data_hospitals_no_embedding.R") ## input P sent to the script --> ugly code
input_p = i
message("Trying : ",input_p)
source("reference_data_hospitals_no_embedding.R") ## input P sent to the script --> ugly code
source('~/Desktop/marko_paper/github_code/run_experiment_variable_size_reference.R')
tmp
source("test_models.R",local = T) ## load setup
# input_p = 10 ### here cone control the amount of reference data -- inputed in extrenal script
data = readRDS("data.RDS")
data$reference = data$reference[sample(1:nrow(data$reference),size = input_p),]
h_size = 10
hospital_models = lapply(1:h_size,function(x){
h = create_hospital_model()
# message(x," done")
return(h)
})
hospital_models = lapply(1:h_size,function(x){
tmp_data = data[[paste0("hospital_",x)]]
test = data$test
h = hospital_models[[x]]
tmp_dec = train_model(13,h$decoder,x_data =tmp_data$x ,y_data = tmp_data$y)
h$decoder = tmp_dec$new_model
# message(x," done")
return(h)
})
allign_predictions = function(i){
current_model = hospital_models[[i]]
current_data = data[[paste0("hospital_",i)]]
## working data
tmp = data$reference[sample(1:nrow(data$reference),size = nrow(data$reference)/2),]
## create temp target Y
others = setdiff(1:h_size,i)
other_embeddings = lapply(others,function(x){
tmp_model = hospital_models[[x]]
tmp_model$decoder(tmp) %>% as.matrix()
})
holder = other_embeddings[[1]]
for(j in 2:length(other_embeddings)){
holder = holder + other_embeddings[[j]]
}
holder = holder/length(other_embeddings)
tmp_decoder = train_model(n_epoch = 1,model = current_model$decoder,x_data = rbind(current_data$x,tmp),y_data = c(current_data$y,round(holder)))
current_model$decoder = tmp_decoder$new_model
rm(tmp)
## global assign
hospital_models[[i]] <<- current_model
NULL
}
get_mean_test_predictions = function(){
acc = c()
auc = c()
for(i in 1:h_size){
ev = evaluate_test_no_em(data_x = data$test$x,data_y = data$test$y,model_list = hospital_models[[i]])
acc = c(acc,ev$acc)
auc = c(auc,ev$auc)
}
return(
list(
acc=acc,
auc=auc
)
)
}
epoch = 20
init = get_mean_test_predictions()
test_acc = c(mean(init$acc))
test_auc = c(mean(init$auc))
lapply(1:h_size,allign_predictions)
i = 1
current_model = hospital_models[[i]]
current_data = data[[paste0("hospital_",i)]]
## working data
tmp = data$reference[sample(1:nrow(data$reference),size = nrow(data$reference)/2),]
tmp
nrow(data$reference)/2)
nrow(data$reference)/2
nrow(data$reference)
source('~/Desktop/marko_paper/github_code/run_experiment_variable_size_reference.R')
source('~/Desktop/marko_paper/github_code/run_experiment_variable_size_reference.R')
library(magrittr)
library(DMwR)
set.seed(1231)
setwd("~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/synth_michael")
d1 = read.csv("../../synthetic data/data1.csv")
View(d1)
View(d1)
d1 = read.csv("../../synthetic data/data1.csv")[,.1]
d1 = read.csv("../../synthetic data/data1.csv")[,-1]
View(d1)
d2 = read.csv("../../synthetic data/data2.csv")[,-1]
View(d2)
h1 = d1[sample(1:nrow(d1),200),]
h2 = d2[sample(1:nrow(d1),200),]
h2 = d2[sample(1:nrow(d2),200),]
h1 = d1[sample(one <- 1:nrow(d1),200),]
h2 = d2[sample(tw0 <- 1:nrow(d2),200),]
h1 = d1[one <- sample(1:nrow(d1),200),]
h2 = d2[two <- sample(1:nrow(d2),200),]
reference = rbind(
d1,d2
)
reference = sample(setdiff(1:nrow(reference),c(one,two+nrow(d1))),size = 10000)
library(magrittr)
library(DMwR)
set.seed(1231)
d1 = read.csv("../../synthetic data/data1.csv")[,-1]
d2 = read.csv("../../synthetic data/data2.csv")[,-1]
h1 = d1[one <- sample(1:nrow(d1),200),]
h2 = d2[two <- sample(1:nrow(d2),200),]
reference = rbind(
d1,d2
)
reference = refernce[sample(setdiff(1:nrow(reference),c(one,two+nrow(d1))),size = 10000),]
library(magrittr)
library(DMwR)
set.seed(1231)
d1 = read.csv("../../synthetic data/data1.csv")[,-1]
d2 = read.csv("../../synthetic data/data2.csv")[,-1]
h1 = d1[one <- sample(1:nrow(d1),200),]
h2 = d2[two <- sample(1:nrow(d2),200),]
reference = rbind(
d1,d2
)
reference = refernce[sample(setdiff(1:nrow(reference),c(one,two+nrow(d1))),size = 10000),]
reference = reference[sample(setdiff(1:nrow(reference),c(one,two+nrow(d1))),size = 10000),]
h1 = d1[one <- sample(1:nrow(d1),300),]
h2 = d2[two <- sample(1:nrow(d2),300),]
hospitals = list()
hospitals[[1]] = list()
hospitals[[1]]$x = h1[,1:10] %>% as.matrix()
hospitals[[1]]$y = h1[,11] %>% as.character() %>% as.numeric()
hospitals[[2]] = list()
hospitals[[2]]$x = h1[,1:10] %>% as.matrix()
hospitals[[2]]$y = h1[,11] %>% as.character() %>% as.numeric()
names(hospitals) = paste0("hospital_",1:length(hospitals))
hospitals$reference = reference
hospitals
str(hospitals)
reference = reference[sample(setdiff(1:nrow(reference),c(one,two+nrow(d1))),size = 13000),]
library(magrittr)
library(DMwR)
set.seed(1231)
d1 = read.csv("../../synthetic data/data1.csv")[,-1]
d2 = read.csv("../../synthetic data/data2.csv")[,-1]
h1 = d1[one <- sample(1:nrow(d1),300),]
h2 = d2[two <- sample(1:nrow(d2),300),]
reference = rbind(
d1,d2
)
reference = reference[sample(setdiff(1:nrow(reference),c(one,two+nrow(d1))),size = 13000),]
hospitals$test$x = hospitals$reference[10001:13000,1:10] %>% as.matrix()
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/synth_michael/prepare_data.R')
str(hospitals)
str(hospitals,1)
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/synth_michael/run_experiment_variable_size_reference.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/synth_michael/prepare_data.R')
hospitals$reference[30001:35000,11]
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/synth_michael/prepare_data.R')
hospitals$reference[30001:35000,11]
hospitals$reference[30001:35000,1:10]
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/synth_michael/solo_hospitals.R')
mean(mean_solo_acc)
mean(mean_solo_auc)
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/synth_michael/global_benchmarka.R')
mean(no_emm_acc)
mean(no_emm_auc)
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/synth_michael/run_experiment_variable_size_reference.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/synth_michael/run_experiment_variable_size_reference.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/synth_michael/run_experiment_variable_size_reference.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/synth_michael/prepare_data.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/synth_michael/solo_hospitals.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/synth_michael/global_benchmarka.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/synth_michael/run_experiment_variable_size_reference.R')
output_stats = list(
acc = test_acc,
auc = test_auc
)
results[[length(results)+1]] = output_stats
names(results) = paste0("ref_size_",candidates)
saveRDS(results,file = "RDS/ANN_variable_reference_size_all_reference.RDS")
library(ggplot2)
library(magrittr)
library(reshape2)
library(grid)
solo = readRDS("RDS/solo_ANN.RDS")
ann = readRDS("RDS/ANN_variable_reference_size_all_reference.RDS")
global = readRDS("RDS/global_ANN.RDS")
ann_ = lapply(ann,function(x){
x$acc = (x$acc %>% TTR::SMA(.,n=3)) %>% max(.,na.rm = T)
x$auc = (x$auc %>% TTR::SMA(.,n=3))  %>% max(.,na.rm = T)
x
})
acc_ = lapply(ann_,function(x)x$acc) %>% unlist()
auc_ = lapply(ann_,function(x)x$auc) %>% unlist()
benchmark_acc = list(
solo = rep(mean(solo$acc),length(acc_)),
global = rep(mean(global$acc),length(acc_)),
ref = acc_,
x = gsub(names(acc_),pattern = "ref_size_",replacement = "") %>% as.numeric()
)
benchmark_auc = list(
solo = rep(mean(solo$auc),length(acc_)),
global = rep(mean(global$auc),length(acc_)),
ref = auc_,
x = gsub(names(auc_),pattern = "ref_size_",replacement = "") %>% as.numeric()
)
acc = stringi::stri_list2matrix(benchmark_acc)
acc = apply(acc,2,as.numeric)
auc = stringi::stri_list2matrix(benchmark_auc)
auc = apply(auc,2,as.numeric)
acc = as.data.frame(acc)
auc = as.data.frame(auc)
colnames(acc) = c(
"solo",
"global",
"reference",
"Size"
)
colnames(auc) = c(
"solo",
"global",
"reference",
"Size"
)
acc333 = acc
auc333 = auc
rm(list=setdiff(ls,c("auc333","acc333")))
rm(list=setdiff(ls(),c("auc333","acc333")))
risi2 = function(acc11=acc333,auc11=auc333){
# names = c(names,"Size")
tmp1 = melt(acc11,"Size")
tmp2 = melt(auc11,"Size")
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy (test)") + ggtitle("20 hospitals (from 35-65 examples per hosp.):") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
two = ggplot(tmp2, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("AUC (test)") + ggtitle("20 hospitals (from 35-65 examples per hosp.):") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
multiplot = function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
list(
ACC = one,
AUC = two
)
}
save.image("~/Desktop/marko_paper/share/for_markdown_2.RData")
load("for_markdown.RData")
load("for_markdown2.RData")
