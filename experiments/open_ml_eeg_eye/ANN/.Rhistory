"solo",
"global",
"proposed method",
"Size"
)
colnames(auc) = c(
"solo",
"global",
"proposed method",
"Size"
)
risi = function(acc11=acc,auc11=auc){
# names = c(names,"Size")
tmp1 = melt(acc11,"Size")
tmp2 = melt(auc11,"Size")
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy (test)") + ggtitle("20 hospitals (from 35-65 examples per hosp.):") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
two = ggplot(tmp2, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("AUC (test)") + ggtitle("20 hospitals (from 35-65 examples per hosp.):") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
multiplot = function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
list(
ACC = one,
AUC = two
)
}
save.image("~/Desktop/marko_paper/share/for_markdown.RData")
risi = function(acc11=acc,auc11=auc){
# names = c(names,"Size")
tmp1 = melt(acc11,"Size")
tmp2 = melt(auc11,"Size")
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy (test)") + ggtitle("20 hospitals (from 35-65 examples per hosp.):") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
two = ggplot(tmp2, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("AUC (test)") + ggtitle("20 hospitals (from 35-65 examples per hosp.):") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
multiplot = function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
list(
ACC = one,
AUC = two
)
}
risi()
risi()[[1]]
risi = function(acc11=acc,auc11=auc){
# names = c(names,"Size")
tmp1 = melt(acc11,"Size")
tmp2 = melt(auc11,"Size")
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy (test)") + ggtitle("RF: 20 hospitals (from 70-130 examples per hosp.)") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
two = ggplot(tmp2, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("AUC (test)") + ggtitle("RF: 20 hospitals (from 70-130 examples per hosp.)") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
multiplot = function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
list(
ACC = one,
AUC = two
)
}
risi = function(acc11=acc,auc11=auc){
# names = c(names,"Size")
tmp1 = melt(acc11,"Size")
tmp2 = melt(auc11,"Size")
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy (test)") + ggtitle("RF: 20 hospitals (from 70-130 examples per hosp.)") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
two = ggplot(tmp2, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("AUC (test)") + ggtitle("RF: 20 hospitals (from 70-130 examples per hosp.)") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
multiplot = function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(
one,two,cols=1
)
}
risi()[[1]]
jpeg(filename = "results_png/RF_eye.png", pointsize =12, quality = 100,width = 2000,height = 1200)
risi()
dev.off()
jpeg(filename = "results_png/RF_eye.JPG", pointsize =12, quality = 100,width = 2000,height = 1200)
risi()
dev.off()
jpeg(filename = "results_png/RF_eye.JPG", pointsize =12, quality = 100,width = 1000,height = 1000)
risi()
dev.off()
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/run_core_script.R')
output_stats = list(
acc = test_acc,
auc = test_auc
)
results[[length(results)+1]] = output_stats
names(results) = paste0("ref_size_",candidates)
saveRDS(results,file = "results_rds/our_method_all_data.RDS")
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/plot_results.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/run_core_script.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/run_core_script.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/run_core_script.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/run_core_script.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/run_core_script.R')
i = 10000
rm(list = setdiff(ls(),c("results","candidates","i")))
input_p = i
message("Trying : ",input_p)
source("method_core_script.R") ## input P sent to the script --> ugly code
setwd("~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/RF")
source("method_core_script.R") ## input P sent to the script --> ugly code
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/RF/plot_results.R')
names(results) = paste0("ref_size_",candidates)
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/RF/run_core_script.R')
source('~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/RF/plot_results.R')
global = readRDS("results_rds/global_all_data.RDS")
rf = readRDS("results_rds/our_method_all_data.RDS")
rf_ = lapply(rf,function(x){
x$acc = (x$acc %>% TTR::SMA(.,n=2)) %>% max(.,na.rm = T)
x$auc = (x$auc %>% TTR::SMA(.,n=2))  %>% max(.,na.rm = T)
x
})
solo_acc = lapply(rf,function(x){
x$acc[1]
}) %>% unlist() %>% mean()
solo_auc = lapply(rf,function(x){
x$auc[1]
}) %>% unlist() %>% mean()
acc_ = lapply(rf_,function(x)x$acc) %>% unlist()
auc_ = lapply(rf_,function(x)x$auc) %>% unlist()
benchmark_acc = list(
solo = rep(solo_acc,length(acc_)),
global = rep(mean(global$acc),length(acc_)),
ref = acc_,
x = gsub(names(acc_),pattern = "ref_size_",replacement = "") %>% as.numeric()
)
benchmark_auc = list(
solo = rep(solo_auc,length(acc_)),
global = rep(mean(global$auc),length(acc_)),
ref = auc_,
x = gsub(names(auc_),pattern = "ref_size_",replacement = "") %>% as.numeric()
)
acc = stringi::stri_list2matrix(benchmark_acc)
acc = apply(acc,2,as.numeric)
auc = stringi::stri_list2matrix(benchmark_auc)
auc = apply(auc,2,as.numeric)
acc = as.data.frame(acc)
auc = as.data.frame(auc)
colnames(acc) = c(
"solo",
"global",
"proposed method",
"Size"
)
colnames(auc) = c(
"solo",
"global",
"proposed method",
"Size"
)
risi = function(acc11=acc,auc11=auc){
# names = c(names,"Size")
tmp1 = melt(acc11,"Size")
tmp2 = melt(auc11,"Size")
one =  ggplot(tmp1, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("Accuracy (test)") + ggtitle("RF 100 trees : 20 hospitals (from 70-130 examples per hosp.)") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
two = ggplot(tmp2, aes(Size,value)) + geom_point(aes(colour = variable),lwd=1.25) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Ref. Size") + ylab("AUC (test)") + ggtitle("RF 100 trees: 20 hospitals (from 70-130 examples per hosp.)") +
theme(axis.text.x = element_text(angle = 45)) +
scale_x_log10("Ref. Size", labels = as.character(acc11$Size), breaks = acc11$Size)
multiplot = function(..., plotlist=NULL, file, cols=1, layout=NULL) {
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multiplot(
one,two,cols=1
)
}
risi()
jpeg(filename = "../results_png/RF_eye.JPG", pointsize =12, quality = 100,width = 1000,height = 1000)
risi()
dev.off()
library(ggplot2)
library(magrittr)
library(reshape2)
library(grid)
global = readRDS("results_rds/global_all_data.RDS")
rf = readRDS("results_rds/our_method_all_data.RDS")
rf_ = lapply(rf,function(x){
x$acc = (x$acc %>% TTR::SMA(.,n=2)) %>% max(.,na.rm = T)
x$auc = (x$auc %>% TTR::SMA(.,n=2))  %>% max(.,na.rm = T)
x
})
solo_acc = lapply(rf,function(x){
x$acc[1]
}) %>% unlist() %>% mean()
solo_auc = lapply(rf,function(x){
x$auc[1]
}) %>% unlist() %>% mean()
acc_ = lapply(rf_,function(x)x$acc) %>% unlist()
auc_ = lapply(rf_,function(x)x$auc) %>% unlist()
benchmark_acc = list(
solo = rep(solo_acc,length(acc_)),
global = rep(mean(global$acc),length(acc_)),
ref = acc_,
x = gsub(names(acc_),pattern = "ref_size_",replacement = "") %>% as.numeric()
)
benchmark_auc = list(
solo = rep(solo_auc,length(acc_)),
global = rep(mean(global$auc),length(acc_)),
ref = auc_,
x = gsub(names(auc_),pattern = "ref_size_",replacement = "") %>% as.numeric()
)
acc = stringi::stri_list2matrix(benchmark_acc)
acc = apply(acc,2,as.numeric)
auc = stringi::stri_list2matrix(benchmark_auc)
auc = apply(auc,2,as.numeric)
acc = as.data.frame(acc)
auc = as.data.frame(auc)
colnames(acc) = c(
"solo",
"global",
"proposed method",
"Size"
)
colnames(auc) = c(
"solo",
"global",
"proposed method",
"Size"
)
rf
learn = lapply(rf,function(x){
x$acc
})
learn
learn = lapply(rf,function(x){
x$acc
}) %>% stringi::stri_list2matrix()
learn = lapply(rf,function(x){
x$acc
}) %>% stringi::stri_list2matrix(.,byrow = F)
View(learn)
learn = lapply(rf,function(x){
x$acc
}) %>% stringi::stri_list2matrix(.,byrow = F)
learn
learn = lapply(rf,function(x){
x$acc
}) %>% stringi::stri_list2matrix(.,byrow = F)
learn = apply(learn, 2,as.numeric)
learn
learn = as.data.frame(learn)
learn = as.data.frame(learn)
colnames(learn) = names(rf)
learn
learn$Epoch = 1:6
learn = melt(learn,"Epoch")
learn_plot =  ggplot(learn, aes(Epoch,value)) + geom_point(aes(colour = variable),lwd=1) +
geom_line(aes(x=Size,y=value,colour = variable),lwd=0.75) +
xlab("Epoch") + ylab("Accuracy (test)") + ggtitle("RF learning curve") +
theme(axis.text.x = element_text(angle = 45))
learn_plot
learn_plot =  ggplot(learn, aes(Epoch,value)) + geom_point(aes(colour = variable),lwd=1) +
geom_line(aes(x=Epoch,y=value,colour = variable),lwd=0.75) +
xlab("Epoch") + ylab("Accuracy (test)") + ggtitle("RF learning curve") +
theme(axis.text.x = element_text(angle = 45))
learn_plot
library(ggplot2)
library(magrittr)
library(reshape2)
library(grid)
global = readRDS("results_rds/global_all_data.RDS")
rf = readRDS("results_rds/our_method_all_data.RDS")
learn = lapply(rf,function(x){
x$acc
}) %>% stringi::stri_list2matrix(.,byrow = F)
learn = apply(learn, 2,as.numeric)
learn = as.data.frame(learn)
colnames(learn) = names(rf)
learn$Epoch = 1:6 -1
learn = melt(learn,"Epoch")
learn_plot =  ggplot(learn, aes(Epoch,value)) + geom_point(aes(colour = variable),lwd=1) +
geom_line(aes(x=Epoch,y=value,colour = variable),lwd=0.75) +
xlab("Epoch") + ylab("Accuracy (test)") + ggtitle("RF learning curve") +
theme(axis.text.x = element_text(angle = 45))
learn_plot
library(ggplot2)
library(magrittr)
library(reshape2)
library(grid)
global = readRDS("results_rds/global_all_data.RDS")
rf = readRDS("results_rds/our_method_all_data.RDS")
learn = lapply(rf,function(x){
x$acc
}) %>% stringi::stri_list2matrix(.,byrow = F)
learn = apply(learn, 2,as.numeric)
learn = as.data.frame(learn)
colnames(learn) = names(rf)
learn$Epoch = 1:6 -1
learn = melt(learn,"Epoch")
learn_plot =  ggplot(learn, aes(Epoch,value)) + geom_point(aes(colour = variable),lwd=1) +
geom_line(aes(x=Epoch,y=value,colour = variable),lwd=0.75) +
xlab("Epoch") + ylab("Accuracy (test)") + ggtitle("RF learning curve Eye dataset:") +
theme(axis.text.x = element_text(angle = 45))
learn_plot
library(ggplot2)
library(magrittr)
library(reshape2)
library(grid)
global = readRDS("results_rds/global_all_data.RDS")
rf = readRDS("results_rds/our_method_all_data.RDS")
learn = lapply(rf,function(x){
x$acc
}) %>% stringi::stri_list2matrix(.,byrow = F)
learn = apply(learn, 2,as.numeric)
learn = as.data.frame(learn)
colnames(learn) = names(rf)
learn$Epoch = 1:6 -1
learn = melt(learn,"Epoch")
learn_plot =  ggplot(learn, aes(Epoch,value)) + geom_point(aes(colour = variable),lwd=1) +
geom_line(aes(x=Epoch,y=value,colour = variable),lwd=0.75) +
xlab("Epoch") + ylab("Accuracy (test)") + ggtitle("RF learning curve Eye dataset:") +
theme(axis.text.x = element_text(angle = 45))
jpeg(filename = "../results_png/RF_lc.JPG", pointsize =12, quality = 100,width = 1000,height = 1000)
learn_plot
dev.off()
setwd("~/Desktop/marko_paper/github_code/FederatedLearningViaCoTraining/experiments/open_ml_eeg_eye/ANN")
library(ggplot2)
library(magrittr)
library(reshape2)
library(grid)
global = readRDS("RDS/global_ANN.RDS")
rf = readRDS("RDS/ANN_method.RDS")
learn = lapply(rf,function(x){
x$acc
}) %>% stringi::stri_list2matrix(.,byrow = F)
learn = apply(learn, 2,as.numeric)
learn = as.data.frame(learn)
colnames(learn) = names(rf)
learn$Epoch = 1:6 -1
learn = melt(learn,"Epoch")
learn_plot =  ggplot(learn, aes(Epoch,value)) + geom_point(aes(colour = variable),lwd=1) +
geom_line(aes(x=Epoch,y=value,colour = variable),lwd=0.75) +
xlab("Epoch") + ylab("Accuracy (test)") + ggtitle("ANN learning curve Eye dataset:") +
theme(axis.text.x = element_text(angle = 45))
library(ggplot2)
library(magrittr)
library(reshape2)
library(grid)
global = readRDS("RDS/global_ANN.RDS")
rf = readRDS("RDS/ANN_method.RDS")
learn = lapply(rf,function(x){
x$acc
}) %>% stringi::stri_list2matrix(.,byrow = F)
learn = apply(learn, 2,as.numeric)
learn = as.data.frame(learn)
colnames(learn) = names(rf)
learn$Epoch = 1:11 -1
learn = melt(learn,"Epoch")
learn_plot =  ggplot(learn, aes(Epoch,value)) + geom_point(aes(colour = variable),lwd=1) +
geom_line(aes(x=Epoch,y=value,colour = variable),lwd=0.75) +
xlab("Epoch") + ylab("Accuracy (test)") + ggtitle("ANN learning curve Eye dataset:") +
theme(axis.text.x = element_text(angle = 45))
jpeg(filename = "../results_png/ANN_lc.JPG", pointsize =12, quality = 100,width = 1000,height = 1000)
learn_plot
dev.off()
learn_plot
